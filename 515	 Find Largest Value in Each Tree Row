package leetcode;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> largestValues(TreeNode root) {
    	List<Integer> res = new ArrayList<>(); 
    	Queue<TreeNode> queue = new LinkedList<>();
    	if(root == null){
    		return res;
    	}
    	queue.offer(root);
    	int max = Integer.MIN_VALUE;
    	int num = 1;
    	int amount = 0;
    	int count = 0;
    	while( !queue.isEmpty() ){
    		root = queue.poll();
    		count++;
    		if(root.val > max){
    			max = root.val;
    		}
    		if(root.left != null){
    			queue.offer(root.left);
    			amount++;
    		}
    		if(root.right != null){
    			queue.offer(root.right);
    			amount++;
    		}
    		if(count == num){
    			res.add(max);
    			count = 0;
    			num = amount;
    			amount = 0;
    			max = Integer.MIN_VALUE;
    		}
    	}
		return res;
        
    }
}

//my solution   another way to count is queue.size();
