public class Solution {
    public int[] singleNumber(int[] nums) {
        Arrays.sort(nums);
        int[] res = new int[2];
        int j = 0;
        for(int i=0;i<nums.length;i++){
        	if(i == nums.length-1){                          //my solution    
        		res[j] = nums[i];
        		break;
        	}
        	if(nums[i]==nums[i+1]){
        		i++;
        	}else {
				res[j] = nums[i];
				j++;
			}
        	if(j==2){
        		break;
        	}
        }
        return res;
    }
}



public class Solution {
    public int[] singleNumber(int[] nums) {
        // Pass 1 : 
        // Get the XOR of the two numbers we need to find 
        int diff = 0;
        for (int num : nums) {
            diff ^= num;                                                           //easy
        }
        // Get its last set bit
        diff &= -diff;                                       //~(diff-1) == -diff    ~diff+1 == -diff
                             //diff &= ~(diff-1)   we can get the last set bie("1")   means   two nums's xor are different in this bit
        // Pass 2 :
        int[] rets = {0, 0}; // this array stores the two numbers we will return
        for (int num : nums)
        {
            if ((num & diff) == 0) // the bit is not set
            {
                rets[0] ^= num;
            }
            else // the bit is set
            {
                rets[1] ^= num;
            }
        }
        return rets;
    }
}
