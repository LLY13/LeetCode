//mysolution

class Solution {
    public List<Integer> selfDividingNumbers(int left, int right) {
    	LinkedList<Integer> res = new LinkedList<Integer>();
    	for(int i=left; i<=right; i++){
    		if (isDividing(i)) {
				res.add(i);
			}
    	}
		return res;      
    }
    
    private boolean isDividing(int num) {
    	int divided;
    	//nums is num to be changed
    	int nums = num;
    	while (nums != 0) {
    		if ((divided = nums % 10) != 0){
        		nums = nums /10;
    			if (num % divided != 0) {
    				return false;
    			}
    		}else {
				return false;
			}
		}
		return true;
	}
}



//other people's solution
class Solution {
    public List<Integer> selfDividingNumbers(int left, int right) {
        List<Integer> ans = new ArrayList();
        for (int n = left; n <= right; ++n) {
            if (selfDividing(n)) ans.add(n);
        }
        return ans;
    }
    public boolean selfDividing(int n) {
        for (char c: String.valueOf(n).toCharArray()) {
            if (c == '0' || (n % (c - '0') > 0))              //c - '0'!!! great idea
                return false;
        }
        return true;
    }
}
